name: Windows Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0 # Fetch all history for all tags and branches

    - name: Check Formatting with Clang-Format
      run: |
          # Find C++ source and header files in relevant directories, ignore errors for non-existent paths
          $files = Get-ChildItem -Recurse -Include *.cpp, *.h, *.hpp -Path src, include, tests, cli/toolsrc -ErrorAction SilentlyContinue # Add other source directories if needed
          if ($files) {
            # Ensure clang-format is available (usually is on windows-latest)
            # Run check: --dry-run shows changes without applying, -Werror treats warnings (like formatting mismatches) as errors
            clang-format --dry-run --Werror $files.FullName
            Write-Host "Clang-Format check passed."
          } else {
            Write-Host "No C++ files found to format check."
          }
      shell: pwsh # Use PowerShell

    - name: Cache vcpkg dependencies
      uses: actions/cache@v4 # Use version 4 of the cache action
      with:
        # Define the directories to cache. These are standard vcpkg folders.
        # Note: Adjust paths if your vcpkg instance is not directly in the 'cli' directory.
        path: |
          cli/vcpkg_installed 
          cli/buildtrees
          cli/packages
          cli/downloads 
        # Define the primary cache key. This key determines when a cache hit occurs.
        # It includes the runner's OS and a hash of the vcpkg manifest file.
        # If vcpkg.json changes, the hash changes, invalidating the cache.
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}
        # Define fallback keys. If the exact key isn't found (e.g., first run after vcpkg.json change),
        # it tries to restore the most recent cache for the same OS.
        restore-keys: |
          ${{ runner.os }}-vcpkg- 

    - name: Bootstrap vcpkg
      run: cli/bootstrap-vcpkg.bat -disableMetrics
      shell: cmd # Use cmd for .bat script

    - name: Configure CMake
      run: |
        cmake -B build -S . "-DCMAKE_TOOLCHAIN_FILE=cli/scripts/buildsystems/vcpkg.cmake"
      shell: pwsh # Use PowerShell for CMake commands

    - name: Build Project
      run: cmake --build build --config Release
      shell: pwsh # Use PowerShell for CMake commands